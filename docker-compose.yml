version: '3.9'
services:
  nginx:
    container_name: ${PROJECT_NAME}-nginx
    tty: true
    volumes:
      - ./docker/nginx/logs/nginx:/var/log/nginx
      - ./docker/nginx-ssl:/etc/my-ssl/cf-origin.crt
    labels:
      - 'com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy=true'
    build:
      context: docker/nginx
      dockerfile: ./Dockerfile
    environment:
      NGINX_ENV: development
    env_file: .env
    depends_on:
      - db
    ports:
      - '80:80'
      - '443:443'
    networks:
      app-network:
        ipv4_address: ${NGINX_CONTAINER_IP}
        aliases:
          - '${API_DOMAIN}'

  #  Golang Rest Api
  app:
    container_name: ${PROJECT_NAME}-api
    env_file: .env
    build:
      dockerfile: ./docker/golang/Dockerfile
      context: .
      target: dev
    volumes:
      - ./api/:/opt/app/api
    restart: always
    ports:
      - '8080:8080'
    expose:
      - '8080'
    networks:
      app-network:
        ipv4_address: ${API_CONTAINER_IP}
    depends_on:
      - db
    entrypoint: ['/etc/wait/wait-for-it.sh', 'db:3306', '--']
    command: ['air']

  # Mysql Database
  db:
    container_name: ${PROJECT_NAME}-db
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    ports:
      - '3306:3306'
    expose:
      - '3306'
    networks:
      - app-network
networks:
  app-network:
    ipam:
      driver: default
      config:
        - subnet: 172.18.0.0/24
